#include <Arduino.h>
#include <Ticker.h>

#define BUZZER_PIN 21
#define BUZZER_CHANNEL 0
#define BUZZER_RESOLUTION 8

const int notaDuracion = 200;

const int melodia[] = {
    262, 294, 330, 349, 392, 440, 494, 523
};

const int duracionNota[] = {
  4, 4, 4, 4, 4, 4, 4, 4
};

Ticker ticker;

int indiceNota = 0;
bool reproduciendo = false;

void reproducirNota() {
  if (!reproduciendo) {
    ledcWriteTone(BUZZER_CHANNEL, 0); // Detener la melodía si no se está reproduciendo
    return;
  }
  
  ledcWriteTone(BUZZER_CHANNEL, melodia[indiceNota]);
  
  int duracion = notaDuracion * 4 / duracionNota[indiceNota];
  indiceNota = (indiceNota + 1) % (sizeof(melodia) / sizeof(melodia[0])); // Avanzar al siguiente índice de la nota
  
  // Si hemos reproducido todas las notas, volver al principio
  if (indiceNota == 0) {
    indiceNota = 0;
  }

  ticker.once_ms(duracion, reproducirNota); // Reproducir la siguiente nota después de la duración
}

void detenerMelodia() {
  reproduciendo = false;
  ledcWriteTone(BUZZER_CHANNEL, 0); // Detener el sonido
}

void setup() {
  Serial.begin(9600); // Inicializar la comunicación serial
  
  ledcSetup(BUZZER_CHANNEL, 1000, BUZZER_RESOLUTION);
  ledcAttachPin(BUZZER_PIN, BUZZER_CHANNEL);
}

void loop() {
  // Leer desde el puerto serial
  if (Serial.available() > 0) {
    char comando = Serial.read();
    if (comando == 's') {
      reproduciendo = true;
      reproducirNota();
    } else if (comando == 'p') {
      detenerMelodia();
    }
  }
}
